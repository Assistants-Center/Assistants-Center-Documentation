import{_ as o,c as l,a as e,b as t,d as s,e as i,o as a,r}from"./app.56853059.js";const p="/assets/dbd_options_folder.9c6e8d28.png",se=JSON.parse('{"title":"Options Folder","description":"","frontmatter":{},"headers":[{"level":2,"title":"Options Files Structure","slug":"options-files-structure","link":"#options-files-structure","children":[{"level":3,"title":"All FormTypes excluding CustomComponent","slug":"all-formtypes-excluding-customcomponent","link":"#all-formtypes-excluding-customcomponent","children":[]},{"level":3,"title":"CustomComponent FormType","slug":"customcomponent-formtype","link":"#customcomponent-formtype","children":[]},{"level":3,"title":"Category Info","slug":"category-info","link":"#category-info","children":[]}]}],"relativePath":"v3/configuration/options-folder.md"}'),c={name:"v3/configuration/options-folder.md"},d={id:"options-folder",tabindex:"-1"},u=e("a",{class:"header-anchor",href:"#options-folder","aria-hidden":"true"},"#",-1),h=i(`<p>This is something that makes v3 less complicated than v2. Folder with settings instead of a 500-line list. Options Folder Handler!</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> Dashboard </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">discord-dashboard</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Dashboard</span><span style="color:#A6ACCD;">(</span><span style="color:#676E95;">/*ENGINE*/</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setOptionsFolder</span><span style="color:#A6ACCD;">(path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#A6ACCD;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./DBD_Categories</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"></span></code></pre></div><h2 id="options-files-structure" tabindex="-1">Options Files Structure <a class="header-anchor" href="#options-files-structure" aria-hidden="true">#</a></h2><p>The options folder structure is as follows:</p><ul><li>The <strong>DBD_CATEGORIES</strong> directory should contain <strong>CATEGORIES</strong> subdirectories,</li><li>The <strong>CATEGORIES</strong> subdirectories contain <strong>OPTIONS</strong> (js files),</li><li><strong>OPTIONS</strong> files conform to the structure (look at Options Files Structure).</li></ul><p><img src="`+p+'" alt="Options Files Structure"></p>',6),y=e("code",null,"*.disabled.js",-1),m=e("h3",{id:"all-formtypes-excluding-customcomponent",tabindex:"-1"},[t("All FormTypes excluding CustomComponent "),e("a",{class:"header-anchor",href:"#all-formtypes-excluding-customcomponent","aria-hidden":"true"},"#")],-1),_=e("code",null,"name: string",-1),g=e("hr",null,null,-1),f=e("code",null,"get: async ({member, guild}) => FormTypeDATATYPE",-1),D=e("hr",null,null,-1),A=e("code",null,"set: async (newData, {member, guild}) => void",-1),T=e("hr",null,null,-1),F=e("code",null,"type: FormTypeManager",-1),C=e("a",{href:"/v3/formtypes.html"},"listed there",-1),O=e("hr",null,null,-1),E=e("code",null,"id: string",-1),b=e("hr",null,null,-1),x=e("code",null,"description: string",-1),I=e("hr",null,null,-1),v=e("code",null,"themeOptions: ThemeOptionsManager",-1),w=e("hr",null,null,-1),N=e("code",null,"shouldBeDisplayed: async ({guild, member}) => boolean",-1),R=e("hr",null,null,-1),L=e("code",null,"permissionsValidate: async ({guild, member}) => string | null",-1),P=e("hr",null,null,-1),S=e("code",null,"serverSideValidation: async (newData, {guild, member}) => string | null",-1),U=e("h3",{id:"customcomponent-formtype",tabindex:"-1"},[t("CustomComponent FormType "),e("a",{class:"header-anchor",href:"#customcomponent-formtype","aria-hidden":"true"},"#")],-1),k=e("code",null,"name: string",-1),V=e("hr",null,null,-1),B=e("code",null,"type: CustomComponentFormType",-1),j=e("hr",null,null,-1),Q=e("code",null,"id: string",-1),G=e("h3",{id:"category-info",tabindex:"-1"},[t("Category Info "),e("a",{class:"header-anchor",href:"#category-info","aria-hidden":"true"},"#")],-1),q=e("p",null,[e("code",null,"__category_info.js"),t(" file is treated exceptionally. IT IS NOT AN OPTION, BUT HAVE TO BE INSIDE THE CATEGORY FOLDER. This is a supplement for the news about the category in which the options are found.")],-1),H=e("code",null,"id: string",-1),M=e("hr",null,null,-1),$=e("code",null,"name: string",-1),Y=e("hr",null,null,-1),J=e("code",null,"usePromiseResolveSystem: boolean",-1);function z(K,W,X,Z,ee,te){const n=r("Badge");return a(),l("div",null,[e("h1",d,[t("Options Folder "),s(n,{type:"warning",text:"REQUIRED"}),t(),u]),h,s(n,{type:"tip",text:"RELEVANT"}),t(),y,t(" option files are ignored by Discord-Dashboard handler."),s(n,{type:"tip",text:"RELEVANT"}),t(" Categories and options are displayed alphabetically by their ids in the Dashboard."),m,e("ul",null,[e("li",null,[s(n,{type:"warning",text:"REQUIRED"}),t(),_,t(" - Option name, shall be only string,"),g]),e("li",null,[s(n,{type:"warning",text:"REQUIRED"}),t(),f,t(" - A function that returns the settings of a given function currently set for a given user and / or on a given server. It is assumed that no value means returning null and then the Dashboard will use the FormTypeDEFAULT set,"),D]),e("li",null,[s(n,{type:"warning",text:"REQUIRED"}),t(),A,t(" - Function that is called if the option has passed the 'serverSideValidation' test. At this point you should set its value in the database so that the get function can return the new value afterwards,"),T]),e("li",null,[s(n,{type:"warning",text:"REQUIRED"}),t(),F,t(" - Option FormType ("),C,t("),"),O]),e("li",null,[s(n,{type:"info",text:"OPTIONAL"}),t(),E,t(" - Option id, should be unique per category, if not defined, it was generated automatically from the file name,"),b]),e("li",null,[s(n,{type:"info",text:"OPTIONAL"}),t(),x,t(" - Option description, can include HTML,"),I]),e("li",null,[s(n,{type:"info",text:"OPTIONAL"}),t(),v,t(" - Option Theme Options (most of the themes have their own Theme Options Manager for each Form Type),"),w]),e("li",null,[s(n,{type:"info",text:"OPTIONAL"}),t(),s(n,{type:"tip",text:"DEFAULT TRUE"}),t(),N,t(" - Function that should return a value if the Option should be displayed (in the API endpoint response). The member and guild parameters are parameters for the Discord.js client,"),R]),e("li",null,[s(n,{type:"info",text:"OPTIONAL"}),t(),s(n,{type:"tip",text:"DEFAULT NULL"}),t(),L,t(" - A function that checks whether the user should have the option to manage the option or whether it should display it with an error. The text returned by this function is treated as the error text and the option is disabled, returning null means editing is allowed,"),P]),e("li",null,[s(n,{type:"info",text:"OPTIONAL"}),t(),s(n,{type:"tip",text:"DEFAULT NULL"}),t(),S,t(" - The function checks the settings sent to the Dashboard (after clicking the Submit button). Returning null means no error, returning the text will display it as an error for the given option (this option will not call the set function, but all others - unless they got an error here - will be saved).")])]),U,e("ul",null,[e("li",null,[s(n,{type:"warning",text:"REQUIRED"}),t(),k,t(" - Option name, shall be just string,"),V]),e("li",null,[s(n,{type:"warning",text:"REQUIRED"}),t(),B,t(" - CustomComponent Option Builder from the THEME. If this FormType is used, only these three fields are needed,"),j]),e("li",null,[s(n,{type:"info",text:"OPTIONAL"}),t(),Q,t(" - Option id, should be unique per category, if not defined, it was generated automatically from the file name.")])]),G,q,e("ul",null,[e("li",null,[s(n,{type:"info",text:"OPTIONAL"}),t(),H,t(" - Category Id, should be unique,"),M]),e("li",null,[s(n,{type:"info",text:"OPTIONAL"}),t(),$,t(" - Category Name, that'd be great if it'd be unique,"),Y]),e("li",null,[s(n,{type:"info",text:"OPTIONAL"}),t(),s(n,{type:"tip",text:"DEFAULT TRUE"}),t(),J,t(" - Use Promises to GET options' values. To get them all one by one, get them simultaneously, which will save the necessary time.")])])])}const oe=o(c,[["render",z]]);export{se as __pageData,oe as default};
